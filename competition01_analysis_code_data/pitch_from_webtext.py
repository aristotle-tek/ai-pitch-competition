# pitch_from_webtext

import pandas as pd
import os
import re
import time

from langchain import OpenAI, PromptTemplate, LLMChain
from langchain.text_splitter import CharacterTextSplitter
from langchain.chains.mapreduce import MapReduceChain
from langchain.llms import OpenAI
from langchain.chains.summarize import load_summarize_chain
from langchain.prompts import PromptTemplate


class AI_Pitch_Generator():
    def __init__( self, openai_api_key, systemprompt, formatprompt):
        openai.api_key =openai_api_key
        self.systemprompt = systemprompt
        self.formatprompt = formatprompt

    def generate_pitch(self, text, model='gpt-3.5-turbo'):
        prompts = [{"role": "system", "content": self.systemprompt}]
        prompts.append({"role": "user", "content": text + self.formatprompt })
        try:
            print("Calling OpenAI API...")
            response = openai.ChatCompletion.create(
                model=model,
                messages=prompts,
                temperature=0,
            )
            return response
        except:
            print("failed getting GPT response, retrying after 12s pause...")
            time.sleep(12)
            print("Calling OpenAI API...")
            response = openai.ChatCompletion.create(
                model=model,
                messages=prompts,
                temp=0,
            )
            return response          




systemprompt = """
You are a an expert entrepreneur-AI and angel investor-AI who will outline pitches for new business ideas, based on a name, category, slogan, an some website text. Format the output in markdown using the following categories:
### 1. Introduction:

### 2. Solution:

### 3. Market Opportunity:

### 4. Business Model:

### 5. Competitive Advantage:

### 6. Team - Leveraging AI-human collaboration:

### 7. Future Plans:
"""


formatprompt = """
Format your pitch in markdown, breaking up sections with h3 tags (###), using the exact sections below:

### 1. Introduction:
Briefly introduce the startup and its mission.
Explain the problem that the startup is addressing and why it matters.

### 2. Solution:
Describe the startup's solution to the problem.
Explain how the solution is unique compared to other products or services on the market.
Discuss any technology or methodology that the startup is using to create its solution.

### 3. Market Opportunity:
Identify the target market for the startup's solution.
Discuss the size of the market opportunity and any relevant trends or projections.

### 4. Business Model:
Describe the startup's business model.
Explain how the startup plans to generate revenue from its solution.
Discuss any pricing strategies or revenue streams that the startup will use.

### 5. Competitive Advantage:
Identify the startup's key competitive advantages.
Discuss any barriers to entry that the startup has created or that exist in the market.
Explain how the startup will maintain its competitive edge over time.

### 6. Team:
The startup is based on an AI-human collaboration, in which the human executes ideas generated by AI. Explain how the startup can uniquely leverage this human-AI collaboration to generate a comparative advantage.

### 7. Future Plans:
Discuss the startup's growth plans, and outline some realistic projected growth figures.

"""







df = pd.read_csv("participants.csv")


tdf = pd.read_csv("website_texts.csv")


df['bname'] = [re.sub(r'\s','_', x) for x in df.bname]

from langchain.text_splitter import NLTKTextSplitter
llm = OpenAI(temperature=0, model_name='gpt-3.5-turbo')


def summarize_text(text, llm):
	text_splitter = NLTKTextSplitter(chunk_size=5000)
	texts = text_splitter.split_text(text)
	i = 0
	summary_out = ''
	for text_chunk in texts:
		prompt_template = """Write a summary of the following text from a website. 
		The purpose of the summary is to determine the nature of a business startup and the strategies
		 and plans behind it, for a pitch competition. This will be used to identify the startups' problem they are trying to solve, 
		 their proposed solution, their market opportunity, their business model, their competitive advantage, 
		 and their potential for future growth. So please keep information about all aspects relevant to any of these dimensions.
		 Finally, if any specific statistics are mentioned, such as the number of twitter Followers, sales figures, or other statistics these should be included verbatim.
		"{text}"
		CONCISE SUMMARY:"""
		summarize_prompt = PromptTemplate(template=prompt_template, input_variables=["text"])
		sum_chain = LLMChain(llm=llm, prompt=summarize_prompt)
		print("Generating summary for chunk: ", str(i))
		summary = sum_chain.run(text=text_chunk)
		summary_out += "\n\n" + summary
		i +=1
	return(summary_out)





AI_pitch_generator = AI_Pitch_Generator("api_key...", systemprompt, formatprompt)


mg = pd.merge(tdf, df, on='bname')

rows = []






start = 98
end = len(mg)
for i in range(start, end):
	was_summarized = 0
	print("\n\n\n------------------\n", str(i))
	row = mg.iloc[i]
	text = row['text']
	category = row['category']
	description = row['description']
	text = re.sub(r'\s+', ' ', text)
	bname = row['bname']
	bizname = re.sub(r'\_',' ', bname)
	status = row['status']
	if status == '🟧🟩':
		status_descr = "For-profit business that has made a sale"
	elif status == '🟧⬜️':
		status_descr = "For-profit business that has NOT YET made a sale"
	elif status == '🟦⬜️':
		status_descr = "Nonprofit"
	else: status_descr = "other"
	print(bizname)
	print(category)
	print(description)
	#print(text)
	print(row['link'])
	if len(text) > 4000:
		text = summarize_text(text, llm)
		was_summarized = 1
	prompt_preface = """Make use of the following metadata and text from the website to structure your pitch. 
	If the website text seems incomprehensible or simply reports that the website is not available, you can ignore it and focus on the metadata.
	1. Business name: """
	text_w_prompt = prompt_preface + bizname + "\n2. Category: " + category + "\n3. Description: " + description +\
	"\n4. Status: " + status_descr  + "\n5. Website text: " + text
	print("running pitch")
	try:
		pitch_response = AI_pitch_generator.generate_pitch(text_w_prompt)
		content = pitch_response.choices[0].message.content
		print(content)
		rows.append([bname, category, description, content, row['link'], row['cofounder'], row['status'], text, was_summarized])
	except:
		print("Failed API call for pitch, retrying after 23s...")
		time.sleep(23)
		pitch_response = AI_pitch_generator.generate_pitch(text_w_prompt)
		content = pitch_response.choices[0].message.content
		print(content)
		rows.append([bname, category, description, content, row['link'], row['cofounder'], row['status'], text, was_summarized])



pdf = pd.DataFrame(rows)
pdf.columns = ['bname', 'category', 'description', 'content', 'link','cofounder','status','text','wassummarized']


pdf.to_csv("AI_Gen_Pitches.csv", index=False)


